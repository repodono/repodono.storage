Base Storage behavior
=====================

Make up a storage_enabled content type::

    >>> portal = layer['portal']
    >>> from plone.dexterity.fti import DexterityFTI
    >>> fti = DexterityFTI('storage_enabled')
    >>> fti.klass = 'plone.dexterity.content.Item'
    >>> fti.behaviors = ('repodono.storage.behavior.storage.IStorageEnabler',)
    >>> portal.portal_types._setObject('storage_enabled', fti)
    'storage_enabled'

If the create factory was manually invoked without any default values,
it should still result in the creation of the item, albeit with a lack
of an instantiated backend::

    >>> portal.invokeFactory('storage_enabled', 'dummy')
    'dummy'
    >>> portal['dummy']
    <Item ...>

Also, the factory (backend) will be unassigned::

    >>> from zope.annotation.interfaces import IAnnotations
    >>> IAnnotations(portal.dummy).get(
    ...     'repodono.storage.base.StorageFactory')

This ties in with how a site with a type that has the storage behavior
enabled but lacking a storage backend.  First setup a test browser::

    >>> from plone.app.testing import TEST_USER_ID, TEST_USER_NAME
    >>> from plone.app.testing import TEST_USER_PASSWORD, setRoles
    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
    >>> import transaction; transaction.commit()
    >>> from plone.testing.z2 import Browser
    >>> browser = Browser(layer['app'])
    >>> browser.addHeader('Authorization', 'Basic %s:%s' %
    ...     (TEST_USER_NAME, TEST_USER_PASSWORD,))

Open up the page for adding a storage_enabled content::

    >>> browser.open('http://nohost/plone/++add++storage_enabled')

Check the backend options::

    >>> backends = browser.getControl('Backend')
    Traceback (most recent call last):
    ...
    LookupError: label 'Backend'

The backend widget should be disabled via read-only mode.  This avoids
problems with handling of this read-only field under normal circumstance
where a backend is available.  The read-only value should render::

    >>> print(browser.contents)  # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    ...
    <BLANKLINE>
    ...<span...>&lt;no choices are available&gt;</span>...
    ...

Naturally, actually saving the object should not be impeded, as
mentioned.  Implementations of this feature could allow an uninstantiated
backend to exist.

    >>> browser.getControl('Save').click()
    >>> browser.url
    'http://nohost/plone/storage_enabled/view'

A more sensible way might just allow this field to be not required, but
will need more support code that needs to be done.
